// Package provider regroups all the basic CRUD functions to access the objects in the cluster
//
// Code generated by go generate; DO NOT EDIT.
//
// This file was generated by gen_provider_cluster.go at 2019-06-17 12:12:20.794025957 +0300 EEST m=+0.001747689
package provider

import (
	"github.com/twuillemin/kuboxy/pkg/connector"
	"github.com/twuillemin/kuboxy/pkg/context"
	"github.com/twuillemin/kuboxy/pkg/event"
	corev1 "k8s.io/api/core/v1"
	rbacv1 "k8s.io/api/rbac/v1"
	storagev1 "k8s.io/api/storage/v1"
)

// GetNamespaces returns all the Namespace.
func GetNamespaces(contextName string) ([]corev1.Namespace, error) {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return nil, err
	}

	if results := event.GetNamespaces(contextName); results != nil {
		return results, nil
	}

	return connector.GetNamespaces(clientset)
}

// GetNamespace returns the Namespace by its name.
func GetNamespace(contextName string, name string) (*corev1.Namespace, error) {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return nil, err
	}

	if results := event.GetNamespaces(contextName); results != nil {
		for _, namespace := range results {
			if namespace.Name == name {
				return &namespace, nil
			}
		}
		return nil, nil
	}

	return connector.GetNamespace(clientset, name)
}

// CreateNamespace creates the Namespace with the given model.
func CreateNamespace(contextName string, namespace *corev1.Namespace) (*corev1.Namespace, error) {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return nil, err
	}

	return connector.CreateNamespace(clientset, namespace)
}

// UpdateNamespace updates the Namespace with the given model.
func UpdateNamespace(contextName string, namespace *corev1.Namespace) (*corev1.Namespace, error) {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return nil, err
	}

	return connector.UpdateNamespace(clientset, namespace)
}

// DeleteNamespace deletes the Namespace by its name.
func DeleteNamespace(contextName string, name string) error {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return err
	}

	return connector.DeleteNamespace(clientset, name)
}

// GetNodes returns all the Node.
func GetNodes(contextName string) ([]corev1.Node, error) {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return nil, err
	}

	if results := event.GetNodes(contextName); results != nil {
		return results, nil
	}

	return connector.GetNodes(clientset)
}

// GetNode returns the Node by its name.
func GetNode(contextName string, name string) (*corev1.Node, error) {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return nil, err
	}

	if results := event.GetNodes(contextName); results != nil {
		for _, node := range results {
			if node.Name == name {
				return &node, nil
			}
		}
		return nil, nil
	}

	return connector.GetNode(clientset, name)
}

// CreateNode creates the Node with the given model.
func CreateNode(contextName string, node *corev1.Node) (*corev1.Node, error) {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return nil, err
	}

	return connector.CreateNode(clientset, node)
}

// UpdateNode updates the Node with the given model.
func UpdateNode(contextName string, node *corev1.Node) (*corev1.Node, error) {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return nil, err
	}

	return connector.UpdateNode(clientset, node)
}

// DeleteNode deletes the Node by its name.
func DeleteNode(contextName string, name string) error {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return err
	}

	return connector.DeleteNode(clientset, name)
}

// GetPersistentVolumes returns all the PersistentVolume.
func GetPersistentVolumes(contextName string) ([]corev1.PersistentVolume, error) {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return nil, err
	}

	if results := event.GetPersistentVolumes(contextName); results != nil {
		return results, nil
	}

	return connector.GetPersistentVolumes(clientset)
}

// GetPersistentVolume returns the PersistentVolume by its name.
func GetPersistentVolume(contextName string, name string) (*corev1.PersistentVolume, error) {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return nil, err
	}

	if results := event.GetPersistentVolumes(contextName); results != nil {
		for _, persistentVolume := range results {
			if persistentVolume.Name == name {
				return &persistentVolume, nil
			}
		}
		return nil, nil
	}

	return connector.GetPersistentVolume(clientset, name)
}

// CreatePersistentVolume creates the PersistentVolume with the given model.
func CreatePersistentVolume(contextName string, persistentVolume *corev1.PersistentVolume) (*corev1.PersistentVolume, error) {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return nil, err
	}

	return connector.CreatePersistentVolume(clientset, persistentVolume)
}

// UpdatePersistentVolume updates the PersistentVolume with the given model.
func UpdatePersistentVolume(contextName string, persistentVolume *corev1.PersistentVolume) (*corev1.PersistentVolume, error) {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return nil, err
	}

	return connector.UpdatePersistentVolume(clientset, persistentVolume)
}

// DeletePersistentVolume deletes the PersistentVolume by its name.
func DeletePersistentVolume(contextName string, name string) error {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return err
	}

	return connector.DeletePersistentVolume(clientset, name)
}

// GetClusterRoles returns all the ClusterRole.
func GetClusterRoles(contextName string) ([]rbacv1.ClusterRole, error) {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return nil, err
	}

	if results := event.GetClusterRoles(contextName); results != nil {
		return results, nil
	}

	return connector.GetClusterRoles(clientset)
}

// GetClusterRole returns the ClusterRole by its name.
func GetClusterRole(contextName string, name string) (*rbacv1.ClusterRole, error) {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return nil, err
	}

	if results := event.GetClusterRoles(contextName); results != nil {
		for _, clusterRole := range results {
			if clusterRole.Name == name {
				return &clusterRole, nil
			}
		}
		return nil, nil
	}

	return connector.GetClusterRole(clientset, name)
}

// CreateClusterRole creates the ClusterRole with the given model.
func CreateClusterRole(contextName string, clusterRole *rbacv1.ClusterRole) (*rbacv1.ClusterRole, error) {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return nil, err
	}

	return connector.CreateClusterRole(clientset, clusterRole)
}

// UpdateClusterRole updates the ClusterRole with the given model.
func UpdateClusterRole(contextName string, clusterRole *rbacv1.ClusterRole) (*rbacv1.ClusterRole, error) {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return nil, err
	}

	return connector.UpdateClusterRole(clientset, clusterRole)
}

// DeleteClusterRole deletes the ClusterRole by its name.
func DeleteClusterRole(contextName string, name string) error {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return err
	}

	return connector.DeleteClusterRole(clientset, name)
}

// GetClusterRoleBindings returns all the ClusterRoleBinding.
func GetClusterRoleBindings(contextName string) ([]rbacv1.ClusterRoleBinding, error) {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return nil, err
	}

	if results := event.GetClusterRoleBindings(contextName); results != nil {
		return results, nil
	}

	return connector.GetClusterRoleBindings(clientset)
}

// GetClusterRoleBinding returns the ClusterRoleBinding by its name.
func GetClusterRoleBinding(contextName string, name string) (*rbacv1.ClusterRoleBinding, error) {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return nil, err
	}

	if results := event.GetClusterRoleBindings(contextName); results != nil {
		for _, clusterRoleBinding := range results {
			if clusterRoleBinding.Name == name {
				return &clusterRoleBinding, nil
			}
		}
		return nil, nil
	}

	return connector.GetClusterRoleBinding(clientset, name)
}

// CreateClusterRoleBinding creates the ClusterRoleBinding with the given model.
func CreateClusterRoleBinding(contextName string, clusterRoleBinding *rbacv1.ClusterRoleBinding) (*rbacv1.ClusterRoleBinding, error) {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return nil, err
	}

	return connector.CreateClusterRoleBinding(clientset, clusterRoleBinding)
}

// UpdateClusterRoleBinding updates the ClusterRoleBinding with the given model.
func UpdateClusterRoleBinding(contextName string, clusterRoleBinding *rbacv1.ClusterRoleBinding) (*rbacv1.ClusterRoleBinding, error) {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return nil, err
	}

	return connector.UpdateClusterRoleBinding(clientset, clusterRoleBinding)
}

// DeleteClusterRoleBinding deletes the ClusterRoleBinding by its name.
func DeleteClusterRoleBinding(contextName string, name string) error {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return err
	}

	return connector.DeleteClusterRoleBinding(clientset, name)
}

// GetStorageClasses returns all the StorageClass.
func GetStorageClasses(contextName string) ([]storagev1.StorageClass, error) {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return nil, err
	}

	if results := event.GetStorageClasses(contextName); results != nil {
		return results, nil
	}

	return connector.GetStorageClasses(clientset)
}

// GetStorageClass returns the StorageClass by its name.
func GetStorageClass(contextName string, name string) (*storagev1.StorageClass, error) {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return nil, err
	}

	if results := event.GetStorageClasses(contextName); results != nil {
		for _, storageClass := range results {
			if storageClass.Name == name {
				return &storageClass, nil
			}
		}
		return nil, nil
	}

	return connector.GetStorageClass(clientset, name)
}

// CreateStorageClass creates the StorageClass with the given model.
func CreateStorageClass(contextName string, storageClass *storagev1.StorageClass) (*storagev1.StorageClass, error) {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return nil, err
	}

	return connector.CreateStorageClass(clientset, storageClass)
}

// UpdateStorageClass updates the StorageClass with the given model.
func UpdateStorageClass(contextName string, storageClass *storagev1.StorageClass) (*storagev1.StorageClass, error) {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return nil, err
	}

	return connector.UpdateStorageClass(clientset, storageClass)
}

// DeleteStorageClass deletes the StorageClass by its name.
func DeleteStorageClass(contextName string, name string) error {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return err
	}

	return connector.DeleteStorageClass(clientset, name)
}
