// The following directive is necessary to make the package coherent:

// +build ignore

// This program generates provider_cluster.go. It can be invoked by running
// go generate

package main

import (
	"log"
	"os"
	"text/template"
	"time"

	"github.com/twuillemin/kuboxy/pkg/types"
)

func main() {

	f, err := os.Create("provider_cluster.go")
	die(err)
	defer f.Close()

	builderTemplate.Execute(
		f,
		struct {
			Timestamp         time.Time
			ObjectDefinitions []types.ObjectDefinition
		}{
			Timestamp:         time.Now(),
			ObjectDefinitions: types.ClusterObjectDefinitions,
		})
}

func die(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

var builderTemplate = template.Must(template.New("").Parse(`// Package provider regroups all the basic CRUD functions to access the objects in the cluster
//
// Code generated by go generate; DO NOT EDIT.
//
// This file was generated by gen_provider_cluster.go at {{ .Timestamp }}
package provider

import (
	"github.com/twuillemin/kuboxy/pkg/connector"
	"github.com/twuillemin/kuboxy/pkg/context"
	"github.com/twuillemin/kuboxy/pkg/event"
	corev1 "k8s.io/api/core/v1"
	rbacv1 "k8s.io/api/rbac/v1"
	storagev1 "k8s.io/api/storage/v1"
)
{{ range .ObjectDefinitions }}
// Get{{ .Plural }} returns all the {{ .Name }}.
func Get{{ .Plural }}(contextName string) ([]{{ .FullName }}, error) {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return nil, err
	}

	if results := event.Get{{ .Plural }}(contextName); results != nil {
		return results, nil
	}

	return connector.Get{{ .Plural }}(clientset)
}

// Get{{ .Name }} returns the {{ .Name }} by its name.
func Get{{ .Name }}(contextName string, name string) (*{{ .FullName }}, error) {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return nil, err
	}

	if results := event.Get{{ .Plural }}(contextName); results != nil {
		for _, {{ .Variable }} := range results {
			if {{ .Variable }}.Name == name {
				return &{{ .Variable }}, nil
			}
		}
		return nil, nil
	}

	return connector.Get{{ .Name }}(clientset, name)
}

// Create{{ .Name }} creates the {{ .Name }} with the given model.
func Create{{ .Name }}(contextName string, {{ .Variable }} *{{ .FullName }}) (*{{ .FullName }}, error) {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return nil, err
	}

	return connector.Create{{ .Name }}(clientset, {{ .Variable }})
}

// Update{{ .Name }} updates the {{ .Name }} with the given model.
func Update{{ .Name }}(contextName string, {{ .Variable }} *{{ .FullName }}) (*{{ .FullName }}, error) {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return nil, err
	}

	return connector.Update{{ .Name }}(clientset, {{ .Variable }})
}

// Delete{{ .Name }} deletes the {{ .Name }} by its name.
func Delete{{ .Name }}(contextName string, name string) error {

	clientset, err := context.GetClientset(contextName)
	if err != nil {
		return err
	}

	return connector.Delete{{ .Name }}(clientset, name)
}
{{ end }}`))
