// Package controller regroups all the HTTP controllers of the application
//
// Code generated by go generate; DO NOT EDIT.
//
// This file was generated by gen_objects_controller_cluster_metrics.go at 2019-02-25 19:47:14.146410287 +0200 EET m=+0.001276293
package controller

import (
	"net/http"

	"github.com/labstack/echo"
	"github.com/twuillemin/kuboxy/pkg/provider"
)

func registerObjectClusterMetricsControllers(e *echo.Echo) {

	// NodeMetricses
	e.GET("api/v1/objects/:contextName/nodeMetricses", getObjectNodeMetricses)
	e.GET("api/v1/objects/:contextName/nodeMetricses/:name", getObjectNodeMetrics)

}

// getObjectNodeMetricses returns a JSON representation of all the nodeMetrics
// @Summary Get all nodeMetricses
// @Description Get all nodeMetricses
// @ID get-object-nodeMetricses
// @Tags ObjectsClusterLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Success 200 {array} NodeMetrics
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/nodeMetricses [get]
func getObjectNodeMetricses(e echo.Context) error {

	contextName := e.Param("contextName")

	// Get the state of the cluster
	nodeMetricses, err := provider.GetNodeMetricses(contextName)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, nodeMetricses)
}

// getObjectNodeMetrics returns a JSON representation of a nodeMetrics
// @Summary Get a nodeMetrics
// @Description Get a nodeMetrics by name
// @ID get-object-nodeMetrics
// @Tags ObjectsClusterLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param name path string true "the name of the object"
// @Success 200 {object} NodeMetrics
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/nodeMetricses/{name} [get]
func getObjectNodeMetrics(e echo.Context) error {

	contextName := e.Param("contextName")
	name := e.Param("name")

	// Get the state of the cluster
	nodeMetrics, err := provider.GetNodeMetrics(contextName, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, nodeMetrics)
}
