// Package controller regroups all the HTTP controllers of the application
//
// Code generated by go generate; DO NOT EDIT.
//
// This file was generated by gen_objects_controller_namespace_metrics.go at 2019-06-12 20:54:35.475810079 +0300 EEST m=+0.002920218
package controller

import (
	"net/http"

	"github.com/labstack/echo"
	"github.com/twuillemin/kuboxy/pkg/provider"
)

func registerObjectNamespaceMetricsControllers(e *echo.Echo) {

	// PodMetricses
	e.GET("api/v1/objects/:contextName/podMetricses/:namespace", getObjectPodMetricses)
	e.GET("api/v1/objects/:contextName/podMetricses/:namespace/:name", getObjectPodMetrics)

}

// getObjectPodMetricses returns a JSON representation of all the podMetrics
// @Summary Get all podMetricses
// @Description Get all podMetricses
// @ID get-object-podMetricses
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Success 200 {array} PodMetrics
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/podMetricses/{namespace} [get]
func getObjectPodMetricses(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Get the state of the cluster
	podMetricses, err := provider.GetPodMetricses(contextName, namespace)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, podMetricses)
}

// getObjectPodMetrics returns a JSON representation of a podMetrics
// @Summary Get a podMetrics
// @Description Get a podMetrics by name
// @ID get-object-podMetrics
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Success 200 {object} PodMetrics
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/podMetricses/{namespace}/{name} [get]
func getObjectPodMetrics(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	podMetrics, err := provider.GetPodMetrics(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, podMetrics)
}
