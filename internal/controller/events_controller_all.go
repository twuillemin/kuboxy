// Package controller regroups all the HTTP controllers of the application
//
// Code generated by go generate; DO NOT EDIT.
//
// This file was generated by gen_events_controller_all.go at 2019-02-25 19:47:13.060843251 +0200 EET m=+0.000424367
package controller

import (
	"github.com/twuillemin/kuboxy/pkg/types"
)

func addEventSource(source eventSource, forwarders []*forwarderInformation, sendChannel chan interface{}) ([]*forwarderInformation, error) {

	var forwarder *forwarderInformation
	var err error

	switch source.ObjectType {

	case types.Namespace:
		forwarder, err = addNamespaceEventForwarder(source, sendChannel)

	case types.Node:
		forwarder, err = addNodeEventForwarder(source, sendChannel)

	case types.PersistentVolume:
		forwarder, err = addPersistentVolumeEventForwarder(source, sendChannel)

	case types.ClusterRole:
		forwarder, err = addClusterRoleEventForwarder(source, sendChannel)

	case types.ClusterRoleBinding:
		forwarder, err = addClusterRoleBindingEventForwarder(source, sendChannel)

	case types.StorageClass:
		forwarder, err = addStorageClassEventForwarder(source, sendChannel)

	case types.Service:
		forwarder, err = addServiceEventForwarder(source, sendChannel)

	case types.Pod:
		forwarder, err = addPodEventForwarder(source, sendChannel)

	case types.PersistentVolumeClaim:
		forwarder, err = addPersistentVolumeClaimEventForwarder(source, sendChannel)

	case types.ConfigMap:
		forwarder, err = addConfigMapEventForwarder(source, sendChannel)

	case types.ReplicationController:
		forwarder, err = addReplicationControllerEventForwarder(source, sendChannel)

	case types.Secret:
		forwarder, err = addSecretEventForwarder(source, sendChannel)

	case types.ServiceAccount:
		forwarder, err = addServiceAccountEventForwarder(source, sendChannel)

	case types.Deployment:
		forwarder, err = addDeploymentEventForwarder(source, sendChannel)

	case types.StatefulSet:
		forwarder, err = addStatefulSetEventForwarder(source, sendChannel)

	case types.DaemonSet:
		forwarder, err = addDaemonSetEventForwarder(source, sendChannel)

	case types.ReplicaSet:
		forwarder, err = addReplicaSetEventForwarder(source, sendChannel)

	case types.NetworkPolicy:
		forwarder, err = addNetworkPolicyEventForwarder(source, sendChannel)

	case types.Role:
		forwarder, err = addRoleEventForwarder(source, sendChannel)

	case types.RoleBinding:
		forwarder, err = addRoleBindingEventForwarder(source, sendChannel)

	case types.Job:
		forwarder, err = addJobEventForwarder(source, sendChannel)

	case types.CronJob:
		forwarder, err = addCronJobEventForwarder(source, sendChannel)

	case types.NodeMetrics:
		forwarder, err = addNodeMetricsEventForwarder(source, sendChannel)

	case types.PodMetrics:
		forwarder, err = addPodMetricsEventForwarder(source, sendChannel)

	}

	if err != nil {
		return forwarders, err
	}

	return append(forwarders, forwarder), nil
}
