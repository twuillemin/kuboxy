// The following directive is necessary to make the package coherent:

// +build ignore

// This program generates connector_namespace_metrics.go. It can be invoked by running
// go generate

package main

import (
	"log"
	"os"
	"text/template"
	"time"

	"github.com/twuillemin/kuboxy/pkg/types"
)

func main() {

	f, err := os.Create("connector_namespace_metrics.go")
	die(err)
	defer f.Close()

	builderTemplate.Execute(
		f,
		struct {
			Timestamp         time.Time
			ObjectDefinitions []types.ObjectDefinition
		}{
			Timestamp:         time.Now(),
			ObjectDefinitions: types.NamespaceMetricsObjectDefinitions,
		})
}

func die(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

var builderTemplate = template.Must(template.New("").Parse(`// Package connector regroups all the basic CRUD functions to access the objects in the cluster 
//
// Code generated by go generate; DO NOT EDIT.
//
// This file was generated by gen_connector_namespace_metrics.go at {{ .Timestamp }}
package connector

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	metricsv1beta1 "k8s.io/metrics/pkg/apis/metrics/v1beta1"
	metrics "k8s.io/metrics/pkg/client/clientset/versioned"
)
{{ range .ObjectDefinitions }}
// Get{{ .Plural }} returns all the {{ .Name }}. If an empty namespace is given, returns all the {{ .Name }}
func Get{{ .Plural }}(metrics *metrics.Clientset, namespace string) ([]{{ .FullName }}, error) {

	client := metrics.{{ .RestProvider }}.{{ .Plural }}(namespace)
	{{ .Variable }}, err := client.List(metav1.ListOptions{})
	if err != nil {
		return []{{ .FullName }}{}, err
	}
	return {{ .Variable }}.Items, nil
}

// Get{{ .Name }} returns the {{ .Name }} by its name. An optional namespace can be given, if none is given
// the operation takes place in the default name space.
func Get{{ .Name }}(metrics *metrics.Clientset, namespace string, name string) (*{{ .FullName }}, error) {

	client := metrics.{{ .RestProvider }}.{{ .Plural }}(getValidNameSpace(namespace))
	return client.Get(name, metav1.GetOptions{})
}
{{ end }}`))
