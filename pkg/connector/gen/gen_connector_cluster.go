// The following directive is necessary to make the package coherent:

// +build ignore

// This program generates connector_cluster.go. It can be invoked by running
// go generate

package main

import (
	"log"
	"os"
	"text/template"
	"time"

	"github.com/twuillemin/kuboxy/pkg/types"
)

func main() {

	f, err := os.Create("connector_cluster.go")
	die(err)
	defer f.Close()

	builderTemplate.Execute(
		f,
		struct {
			Timestamp         time.Time
			ObjectDefinitions []types.ObjectDefinition
		}{
			Timestamp:         time.Now(),
			ObjectDefinitions: types.ClusterObjectDefinitions,
		})
}

func die(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

var builderTemplate = template.Must(template.New("").Parse(`// Package connector regroups all the basic CRUD functions to access the objects in the cluster 
//
// Code generated by go generate; DO NOT EDIT.
//
// This file was generated by gen_connector_cluster.go at {{ .Timestamp }}
package connector

import (
	corev1 "k8s.io/api/core/v1"
	rbacv1 "k8s.io/api/rbac/v1"
	storagev1 "k8s.io/api/storage/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes"
)
{{ range .ObjectDefinitions }}
// Get{{ .Plural }} returns all the {{ .Name }}.
func Get{{ .Plural }}(clientset *kubernetes.Clientset) ([]{{ .FullName }}, error) {

	client := clientset.{{ .RestProvider }}.{{ .Plural }}()
	{{ .Variable }}, err := client.List(metav1.ListOptions{})
	if err != nil {
		return []{{ .FullName }}{}, err
	}
	return {{ .Variable }}.Items, nil
}

// Get{{ .Name }} returns the {{ .Name }} by its name.
func Get{{ .Name }}(clientset *kubernetes.Clientset, name string) (*{{ .FullName }}, error) {

	client := clientset.{{ .RestProvider }}.{{ .Plural }}()
	return client.Get(name, metav1.GetOptions{})
}

// Create{{ .Name }} creates the {{ .Name }} with the given model.
func Create{{ .Name }}(clientset *kubernetes.Clientset, {{ .Variable }} *{{ .FullName }}) (*{{ .FullName }}, error) {

	client := clientset.{{ .RestProvider }}.{{ .Plural }}()
	return client.Create({{ .Variable }})
}

// Update{{ .Name }} updates the {{ .Name }} with the given model.
func Update{{ .Name }}(clientset *kubernetes.Clientset, {{ .Variable }} *{{ .FullName }}) (*{{ .FullName }}, error) {

	client := clientset.{{ .RestProvider }}.{{ .Plural }}()
	return client.Update({{ .Variable }})
}

// Delete{{ .Name }} deletes the {{ .Name }} by its name.
func Delete{{ .Name }}(clientset *kubernetes.Clientset, name string) error {

	client := clientset.{{ .RestProvider }}.{{ .Plural }}()

	deletePolicy := metav1.DeletePropagationForeground

	return client.Delete(name, &metav1.DeleteOptions{
		PropagationPolicy: &deletePolicy,
	})
}
{{ end }}`))
