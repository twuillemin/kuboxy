// Package controller regroups all the HTTP controllers of the application
//
// Code generated by go generate; DO NOT EDIT.
//
// This file was generated by gen_objects_controller_namespace.go at 2019-02-25 19:47:14.337785493 +0200 EET m=+0.002339978
package controller

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo"
	"github.com/twuillemin/kuboxy/pkg/provider"

	appsv1 "k8s.io/api/apps/v1"
	batchv1 "k8s.io/api/batch/v1"
	batchv1beta1 "k8s.io/api/batch/v1beta1"
	corev1 "k8s.io/api/core/v1"
	networkingv1 "k8s.io/api/networking/v1"
	rbacv1 "k8s.io/api/rbac/v1"
)

func registerObjectNamespaceControllers(e *echo.Echo) {

	// Services
	e.GET("api/v1/objects/:contextName/services/:namespace", getObjectServices)
	e.GET("api/v1/objects/:contextName/services/:namespace/:name", getObjectService)
	e.POST("api/v1/objects/:contextName/services/:namespace", createObjectService)
	e.PUT("api/v1/objects/:contextName/services/:namespace", updateObjectService)
	e.DELETE("api/v1/objects/:contextName/services/:namespace/:name", deleteObjectService)

	// Pods
	e.GET("api/v1/objects/:contextName/pods/:namespace", getObjectPods)
	e.GET("api/v1/objects/:contextName/pods/:namespace/:name", getObjectPod)
	e.POST("api/v1/objects/:contextName/pods/:namespace", createObjectPod)
	e.PUT("api/v1/objects/:contextName/pods/:namespace", updateObjectPod)
	e.DELETE("api/v1/objects/:contextName/pods/:namespace/:name", deleteObjectPod)

	// PersistentVolumeClaims
	e.GET("api/v1/objects/:contextName/persistentVolumeClaims/:namespace", getObjectPersistentVolumeClaims)
	e.GET("api/v1/objects/:contextName/persistentVolumeClaims/:namespace/:name", getObjectPersistentVolumeClaim)
	e.POST("api/v1/objects/:contextName/persistentVolumeClaims/:namespace", createObjectPersistentVolumeClaim)
	e.PUT("api/v1/objects/:contextName/persistentVolumeClaims/:namespace", updateObjectPersistentVolumeClaim)
	e.DELETE("api/v1/objects/:contextName/persistentVolumeClaims/:namespace/:name", deleteObjectPersistentVolumeClaim)

	// ConfigMaps
	e.GET("api/v1/objects/:contextName/configMaps/:namespace", getObjectConfigMaps)
	e.GET("api/v1/objects/:contextName/configMaps/:namespace/:name", getObjectConfigMap)
	e.POST("api/v1/objects/:contextName/configMaps/:namespace", createObjectConfigMap)
	e.PUT("api/v1/objects/:contextName/configMaps/:namespace", updateObjectConfigMap)
	e.DELETE("api/v1/objects/:contextName/configMaps/:namespace/:name", deleteObjectConfigMap)

	// ReplicationControllers
	e.GET("api/v1/objects/:contextName/ReplicationControllers/:namespace", getObjectReplicationControllers)
	e.GET("api/v1/objects/:contextName/ReplicationControllers/:namespace/:name", getObjectReplicationController)
	e.POST("api/v1/objects/:contextName/ReplicationControllers/:namespace", createObjectReplicationController)
	e.PUT("api/v1/objects/:contextName/ReplicationControllers/:namespace", updateObjectReplicationController)
	e.DELETE("api/v1/objects/:contextName/ReplicationControllers/:namespace/:name", deleteObjectReplicationController)

	// Secrets
	e.GET("api/v1/objects/:contextName/secrets/:namespace", getObjectSecrets)
	e.GET("api/v1/objects/:contextName/secrets/:namespace/:name", getObjectSecret)
	e.POST("api/v1/objects/:contextName/secrets/:namespace", createObjectSecret)
	e.PUT("api/v1/objects/:contextName/secrets/:namespace", updateObjectSecret)
	e.DELETE("api/v1/objects/:contextName/secrets/:namespace/:name", deleteObjectSecret)

	// ServiceAccounts
	e.GET("api/v1/objects/:contextName/serviceAccounts/:namespace", getObjectServiceAccounts)
	e.GET("api/v1/objects/:contextName/serviceAccounts/:namespace/:name", getObjectServiceAccount)
	e.POST("api/v1/objects/:contextName/serviceAccounts/:namespace", createObjectServiceAccount)
	e.PUT("api/v1/objects/:contextName/serviceAccounts/:namespace", updateObjectServiceAccount)
	e.DELETE("api/v1/objects/:contextName/serviceAccounts/:namespace/:name", deleteObjectServiceAccount)

	// Deployments
	e.GET("api/v1/objects/:contextName/deployments/:namespace", getObjectDeployments)
	e.GET("api/v1/objects/:contextName/deployments/:namespace/:name", getObjectDeployment)
	e.POST("api/v1/objects/:contextName/deployments/:namespace", createObjectDeployment)
	e.PUT("api/v1/objects/:contextName/deployments/:namespace", updateObjectDeployment)
	e.DELETE("api/v1/objects/:contextName/deployments/:namespace/:name", deleteObjectDeployment)

	// StatefulSets
	e.GET("api/v1/objects/:contextName/statefulSets/:namespace", getObjectStatefulSets)
	e.GET("api/v1/objects/:contextName/statefulSets/:namespace/:name", getObjectStatefulSet)
	e.POST("api/v1/objects/:contextName/statefulSets/:namespace", createObjectStatefulSet)
	e.PUT("api/v1/objects/:contextName/statefulSets/:namespace", updateObjectStatefulSet)
	e.DELETE("api/v1/objects/:contextName/statefulSets/:namespace/:name", deleteObjectStatefulSet)

	// DaemonSets
	e.GET("api/v1/objects/:contextName/daemonSets/:namespace", getObjectDaemonSets)
	e.GET("api/v1/objects/:contextName/daemonSets/:namespace/:name", getObjectDaemonSet)
	e.POST("api/v1/objects/:contextName/daemonSets/:namespace", createObjectDaemonSet)
	e.PUT("api/v1/objects/:contextName/daemonSets/:namespace", updateObjectDaemonSet)
	e.DELETE("api/v1/objects/:contextName/daemonSets/:namespace/:name", deleteObjectDaemonSet)

	// ReplicaSets
	e.GET("api/v1/objects/:contextName/replicaSets/:namespace", getObjectReplicaSets)
	e.GET("api/v1/objects/:contextName/replicaSets/:namespace/:name", getObjectReplicaSet)
	e.POST("api/v1/objects/:contextName/replicaSets/:namespace", createObjectReplicaSet)
	e.PUT("api/v1/objects/:contextName/replicaSets/:namespace", updateObjectReplicaSet)
	e.DELETE("api/v1/objects/:contextName/replicaSets/:namespace/:name", deleteObjectReplicaSet)

	// NetworkPolicies
	e.GET("api/v1/objects/:contextName/networkPolicies/:namespace", getObjectNetworkPolicies)
	e.GET("api/v1/objects/:contextName/networkPolicies/:namespace/:name", getObjectNetworkPolicy)
	e.POST("api/v1/objects/:contextName/networkPolicies/:namespace", createObjectNetworkPolicy)
	e.PUT("api/v1/objects/:contextName/networkPolicies/:namespace", updateObjectNetworkPolicy)
	e.DELETE("api/v1/objects/:contextName/networkPolicies/:namespace/:name", deleteObjectNetworkPolicy)

	// Roles
	e.GET("api/v1/objects/:contextName/roles/:namespace", getObjectRoles)
	e.GET("api/v1/objects/:contextName/roles/:namespace/:name", getObjectRole)
	e.POST("api/v1/objects/:contextName/roles/:namespace", createObjectRole)
	e.PUT("api/v1/objects/:contextName/roles/:namespace", updateObjectRole)
	e.DELETE("api/v1/objects/:contextName/roles/:namespace/:name", deleteObjectRole)

	// RoleBindings
	e.GET("api/v1/objects/:contextName/roleBindings/:namespace", getObjectRoleBindings)
	e.GET("api/v1/objects/:contextName/roleBindings/:namespace/:name", getObjectRoleBinding)
	e.POST("api/v1/objects/:contextName/roleBindings/:namespace", createObjectRoleBinding)
	e.PUT("api/v1/objects/:contextName/roleBindings/:namespace", updateObjectRoleBinding)
	e.DELETE("api/v1/objects/:contextName/roleBindings/:namespace/:name", deleteObjectRoleBinding)

	// Jobs
	e.GET("api/v1/objects/:contextName/jobs/:namespace", getObjectJobs)
	e.GET("api/v1/objects/:contextName/jobs/:namespace/:name", getObjectJob)
	e.POST("api/v1/objects/:contextName/jobs/:namespace", createObjectJob)
	e.PUT("api/v1/objects/:contextName/jobs/:namespace", updateObjectJob)
	e.DELETE("api/v1/objects/:contextName/jobs/:namespace/:name", deleteObjectJob)

	// CronJobs
	e.GET("api/v1/objects/:contextName/cronJobs/:namespace", getObjectCronJobs)
	e.GET("api/v1/objects/:contextName/cronJobs/:namespace/:name", getObjectCronJob)
	e.POST("api/v1/objects/:contextName/cronJobs/:namespace", createObjectCronJob)
	e.PUT("api/v1/objects/:contextName/cronJobs/:namespace", updateObjectCronJob)
	e.DELETE("api/v1/objects/:contextName/cronJobs/:namespace/:name", deleteObjectCronJob)

}

// getObjectServices returns a JSON representation of all the service
// @Summary Get all services
// @Description Get all services
// @ID get-object-services
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Success 200 {array} Service
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/services/{namespace} [get]
func getObjectServices(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Get the state of the cluster
	services, err := provider.GetServices(contextName, namespace)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, services)
}

// getObjectService returns a JSON representation of a service
// @Summary Get a service
// @Description Get a service by name
// @ID get-object-service
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Success 200 {object} Service
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/services/{namespace}/{name} [get]
func getObjectService(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	service, err := provider.GetService(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, service)
}

// createObjectService creates a new service with the given object
// @Summary Create a service
// @Description Create a service.
// @ID create-object-service
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body Service true "the definition of the service"
// @Success 200 {object} Service
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/services/{namespace} [post]
func createObjectService(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	service := new(corev1.Service)
	if err := e.Bind(service); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != service.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.CreateService(contextName, namespace, service)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusCreated, saved)
}

// updateObjectService updates a service with the given object
// @Summary Update a service
// @Description Update a service.
// @ID update-object-service
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body Service true "the definition of the service"
// @Success 200 {object} Service
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/services/{namespace} [put]
func updateObjectService(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	service := new(corev1.Service)
	if err := e.Bind(service); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != service.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.UpdateService(contextName, namespace, service)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, saved)
}

// deleteObjectService deletes a service
// @Summary Delete a service
// @Description Delete a service by name
// @ID delete-object-service
// @Tags ObjectsNamespaceLevel
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/services/{namespace}/{name} [delete]
func deleteObjectService(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	err := provider.DeleteService(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.NoContent(http.StatusOK)
}

// getObjectPods returns a JSON representation of all the pod
// @Summary Get all pods
// @Description Get all pods
// @ID get-object-pods
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Success 200 {array} Pod
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/pods/{namespace} [get]
func getObjectPods(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Get the state of the cluster
	pods, err := provider.GetPods(contextName, namespace)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, pods)
}

// getObjectPod returns a JSON representation of a pod
// @Summary Get a pod
// @Description Get a pod by name
// @ID get-object-pod
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Success 200 {object} Pod
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/pods/{namespace}/{name} [get]
func getObjectPod(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	pod, err := provider.GetPod(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, pod)
}

// createObjectPod creates a new pod with the given object
// @Summary Create a pod
// @Description Create a pod.
// @ID create-object-pod
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body Pod true "the definition of the pod"
// @Success 200 {object} Pod
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/pods/{namespace} [post]
func createObjectPod(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	pod := new(corev1.Pod)
	if err := e.Bind(pod); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != pod.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.CreatePod(contextName, namespace, pod)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusCreated, saved)
}

// updateObjectPod updates a pod with the given object
// @Summary Update a pod
// @Description Update a pod.
// @ID update-object-pod
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body Pod true "the definition of the pod"
// @Success 200 {object} Pod
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/pods/{namespace} [put]
func updateObjectPod(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	pod := new(corev1.Pod)
	if err := e.Bind(pod); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != pod.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.UpdatePod(contextName, namespace, pod)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, saved)
}

// deleteObjectPod deletes a pod
// @Summary Delete a pod
// @Description Delete a pod by name
// @ID delete-object-pod
// @Tags ObjectsNamespaceLevel
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/pods/{namespace}/{name} [delete]
func deleteObjectPod(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	err := provider.DeletePod(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.NoContent(http.StatusOK)
}

// getObjectPersistentVolumeClaims returns a JSON representation of all the persistentVolumeClaim
// @Summary Get all persistentVolumeClaims
// @Description Get all persistentVolumeClaims
// @ID get-object-persistentVolumeClaims
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Success 200 {array} PersistentVolumeClaim
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/persistentVolumeClaims/{namespace} [get]
func getObjectPersistentVolumeClaims(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Get the state of the cluster
	persistentVolumeClaims, err := provider.GetPersistentVolumeClaims(contextName, namespace)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, persistentVolumeClaims)
}

// getObjectPersistentVolumeClaim returns a JSON representation of a persistentVolumeClaim
// @Summary Get a persistentVolumeClaim
// @Description Get a persistentVolumeClaim by name
// @ID get-object-persistentVolumeClaim
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Success 200 {object} PersistentVolumeClaim
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/persistentVolumeClaims/{namespace}/{name} [get]
func getObjectPersistentVolumeClaim(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	persistentVolumeClaim, err := provider.GetPersistentVolumeClaim(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, persistentVolumeClaim)
}

// createObjectPersistentVolumeClaim creates a new persistentVolumeClaim with the given object
// @Summary Create a persistentVolumeClaim
// @Description Create a persistentVolumeClaim.
// @ID create-object-persistentVolumeClaim
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body PersistentVolumeClaim true "the definition of the persistentVolumeClaim"
// @Success 200 {object} PersistentVolumeClaim
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/persistentVolumeClaims/{namespace} [post]
func createObjectPersistentVolumeClaim(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	persistentVolumeClaim := new(corev1.PersistentVolumeClaim)
	if err := e.Bind(persistentVolumeClaim); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != persistentVolumeClaim.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.CreatePersistentVolumeClaim(contextName, namespace, persistentVolumeClaim)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusCreated, saved)
}

// updateObjectPersistentVolumeClaim updates a persistentVolumeClaim with the given object
// @Summary Update a persistentVolumeClaim
// @Description Update a persistentVolumeClaim.
// @ID update-object-persistentVolumeClaim
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body PersistentVolumeClaim true "the definition of the persistentVolumeClaim"
// @Success 200 {object} PersistentVolumeClaim
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/persistentVolumeClaims/{namespace} [put]
func updateObjectPersistentVolumeClaim(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	persistentVolumeClaim := new(corev1.PersistentVolumeClaim)
	if err := e.Bind(persistentVolumeClaim); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != persistentVolumeClaim.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.UpdatePersistentVolumeClaim(contextName, namespace, persistentVolumeClaim)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, saved)
}

// deleteObjectPersistentVolumeClaim deletes a persistentVolumeClaim
// @Summary Delete a persistentVolumeClaim
// @Description Delete a persistentVolumeClaim by name
// @ID delete-object-persistentVolumeClaim
// @Tags ObjectsNamespaceLevel
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/persistentVolumeClaims/{namespace}/{name} [delete]
func deleteObjectPersistentVolumeClaim(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	err := provider.DeletePersistentVolumeClaim(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.NoContent(http.StatusOK)
}

// getObjectConfigMaps returns a JSON representation of all the configMap
// @Summary Get all configMaps
// @Description Get all configMaps
// @ID get-object-configMaps
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Success 200 {array} ConfigMap
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/configMaps/{namespace} [get]
func getObjectConfigMaps(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Get the state of the cluster
	configMaps, err := provider.GetConfigMaps(contextName, namespace)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, configMaps)
}

// getObjectConfigMap returns a JSON representation of a configMap
// @Summary Get a configMap
// @Description Get a configMap by name
// @ID get-object-configMap
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Success 200 {object} ConfigMap
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/configMaps/{namespace}/{name} [get]
func getObjectConfigMap(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	configMap, err := provider.GetConfigMap(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, configMap)
}

// createObjectConfigMap creates a new configMap with the given object
// @Summary Create a configMap
// @Description Create a configMap.
// @ID create-object-configMap
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body ConfigMap true "the definition of the configMap"
// @Success 200 {object} ConfigMap
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/configMaps/{namespace} [post]
func createObjectConfigMap(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	configMap := new(corev1.ConfigMap)
	if err := e.Bind(configMap); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != configMap.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.CreateConfigMap(contextName, namespace, configMap)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusCreated, saved)
}

// updateObjectConfigMap updates a configMap with the given object
// @Summary Update a configMap
// @Description Update a configMap.
// @ID update-object-configMap
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body ConfigMap true "the definition of the configMap"
// @Success 200 {object} ConfigMap
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/configMaps/{namespace} [put]
func updateObjectConfigMap(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	configMap := new(corev1.ConfigMap)
	if err := e.Bind(configMap); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != configMap.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.UpdateConfigMap(contextName, namespace, configMap)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, saved)
}

// deleteObjectConfigMap deletes a configMap
// @Summary Delete a configMap
// @Description Delete a configMap by name
// @ID delete-object-configMap
// @Tags ObjectsNamespaceLevel
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/configMaps/{namespace}/{name} [delete]
func deleteObjectConfigMap(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	err := provider.DeleteConfigMap(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.NoContent(http.StatusOK)
}

// getObjectReplicationControllers returns a JSON representation of all the replicationController
// @Summary Get all ReplicationControllers
// @Description Get all ReplicationControllers
// @ID get-object-ReplicationControllers
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Success 200 {array} ReplicationController
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/ReplicationControllers/{namespace} [get]
func getObjectReplicationControllers(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Get the state of the cluster
	ReplicationControllers, err := provider.GetReplicationControllers(contextName, namespace)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, ReplicationControllers)
}

// getObjectReplicationController returns a JSON representation of a replicationController
// @Summary Get a replicationController
// @Description Get a replicationController by name
// @ID get-object-replicationController
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Success 200 {object} ReplicationController
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/ReplicationControllers/{namespace}/{name} [get]
func getObjectReplicationController(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	replicationController, err := provider.GetReplicationController(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, replicationController)
}

// createObjectReplicationController creates a new replicationController with the given object
// @Summary Create a replicationController
// @Description Create a replicationController.
// @ID create-object-replicationController
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body ReplicationController true "the definition of the replicationController"
// @Success 200 {object} ReplicationController
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/ReplicationControllers/{namespace} [post]
func createObjectReplicationController(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	replicationController := new(corev1.ReplicationController)
	if err := e.Bind(replicationController); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != replicationController.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.CreateReplicationController(contextName, namespace, replicationController)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusCreated, saved)
}

// updateObjectReplicationController updates a replicationController with the given object
// @Summary Update a replicationController
// @Description Update a replicationController.
// @ID update-object-replicationController
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body ReplicationController true "the definition of the replicationController"
// @Success 200 {object} ReplicationController
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/ReplicationControllers/{namespace} [put]
func updateObjectReplicationController(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	replicationController := new(corev1.ReplicationController)
	if err := e.Bind(replicationController); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != replicationController.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.UpdateReplicationController(contextName, namespace, replicationController)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, saved)
}

// deleteObjectReplicationController deletes a replicationController
// @Summary Delete a replicationController
// @Description Delete a replicationController by name
// @ID delete-object-replicationController
// @Tags ObjectsNamespaceLevel
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/ReplicationControllers/{namespace}/{name} [delete]
func deleteObjectReplicationController(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	err := provider.DeleteReplicationController(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.NoContent(http.StatusOK)
}

// getObjectSecrets returns a JSON representation of all the secret
// @Summary Get all secrets
// @Description Get all secrets
// @ID get-object-secrets
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Success 200 {array} Secret
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/secrets/{namespace} [get]
func getObjectSecrets(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Get the state of the cluster
	secrets, err := provider.GetSecrets(contextName, namespace)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, secrets)
}

// getObjectSecret returns a JSON representation of a secret
// @Summary Get a secret
// @Description Get a secret by name
// @ID get-object-secret
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Success 200 {object} Secret
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/secrets/{namespace}/{name} [get]
func getObjectSecret(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	secret, err := provider.GetSecret(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, secret)
}

// createObjectSecret creates a new secret with the given object
// @Summary Create a secret
// @Description Create a secret.
// @ID create-object-secret
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body Secret true "the definition of the secret"
// @Success 200 {object} Secret
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/secrets/{namespace} [post]
func createObjectSecret(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	secret := new(corev1.Secret)
	if err := e.Bind(secret); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != secret.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.CreateSecret(contextName, namespace, secret)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusCreated, saved)
}

// updateObjectSecret updates a secret with the given object
// @Summary Update a secret
// @Description Update a secret.
// @ID update-object-secret
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body Secret true "the definition of the secret"
// @Success 200 {object} Secret
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/secrets/{namespace} [put]
func updateObjectSecret(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	secret := new(corev1.Secret)
	if err := e.Bind(secret); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != secret.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.UpdateSecret(contextName, namespace, secret)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, saved)
}

// deleteObjectSecret deletes a secret
// @Summary Delete a secret
// @Description Delete a secret by name
// @ID delete-object-secret
// @Tags ObjectsNamespaceLevel
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/secrets/{namespace}/{name} [delete]
func deleteObjectSecret(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	err := provider.DeleteSecret(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.NoContent(http.StatusOK)
}

// getObjectServiceAccounts returns a JSON representation of all the serviceAccount
// @Summary Get all serviceAccounts
// @Description Get all serviceAccounts
// @ID get-object-serviceAccounts
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Success 200 {array} ServiceAccount
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/serviceAccounts/{namespace} [get]
func getObjectServiceAccounts(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Get the state of the cluster
	serviceAccounts, err := provider.GetServiceAccounts(contextName, namespace)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, serviceAccounts)
}

// getObjectServiceAccount returns a JSON representation of a serviceAccount
// @Summary Get a serviceAccount
// @Description Get a serviceAccount by name
// @ID get-object-serviceAccount
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Success 200 {object} ServiceAccount
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/serviceAccounts/{namespace}/{name} [get]
func getObjectServiceAccount(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	serviceAccount, err := provider.GetServiceAccount(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, serviceAccount)
}

// createObjectServiceAccount creates a new serviceAccount with the given object
// @Summary Create a serviceAccount
// @Description Create a serviceAccount.
// @ID create-object-serviceAccount
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body ServiceAccount true "the definition of the serviceAccount"
// @Success 200 {object} ServiceAccount
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/serviceAccounts/{namespace} [post]
func createObjectServiceAccount(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	serviceAccount := new(corev1.ServiceAccount)
	if err := e.Bind(serviceAccount); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != serviceAccount.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.CreateServiceAccount(contextName, namespace, serviceAccount)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusCreated, saved)
}

// updateObjectServiceAccount updates a serviceAccount with the given object
// @Summary Update a serviceAccount
// @Description Update a serviceAccount.
// @ID update-object-serviceAccount
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body ServiceAccount true "the definition of the serviceAccount"
// @Success 200 {object} ServiceAccount
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/serviceAccounts/{namespace} [put]
func updateObjectServiceAccount(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	serviceAccount := new(corev1.ServiceAccount)
	if err := e.Bind(serviceAccount); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != serviceAccount.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.UpdateServiceAccount(contextName, namespace, serviceAccount)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, saved)
}

// deleteObjectServiceAccount deletes a serviceAccount
// @Summary Delete a serviceAccount
// @Description Delete a serviceAccount by name
// @ID delete-object-serviceAccount
// @Tags ObjectsNamespaceLevel
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/serviceAccounts/{namespace}/{name} [delete]
func deleteObjectServiceAccount(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	err := provider.DeleteServiceAccount(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.NoContent(http.StatusOK)
}

// getObjectDeployments returns a JSON representation of all the deployment
// @Summary Get all deployments
// @Description Get all deployments
// @ID get-object-deployments
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Success 200 {array} Deployment
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/deployments/{namespace} [get]
func getObjectDeployments(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Get the state of the cluster
	deployments, err := provider.GetDeployments(contextName, namespace)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, deployments)
}

// getObjectDeployment returns a JSON representation of a deployment
// @Summary Get a deployment
// @Description Get a deployment by name
// @ID get-object-deployment
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Success 200 {object} Deployment
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/deployments/{namespace}/{name} [get]
func getObjectDeployment(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	deployment, err := provider.GetDeployment(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, deployment)
}

// createObjectDeployment creates a new deployment with the given object
// @Summary Create a deployment
// @Description Create a deployment.
// @ID create-object-deployment
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body Deployment true "the definition of the deployment"
// @Success 200 {object} Deployment
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/deployments/{namespace} [post]
func createObjectDeployment(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	deployment := new(appsv1.Deployment)
	if err := e.Bind(deployment); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != deployment.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.CreateDeployment(contextName, namespace, deployment)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusCreated, saved)
}

// updateObjectDeployment updates a deployment with the given object
// @Summary Update a deployment
// @Description Update a deployment.
// @ID update-object-deployment
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body Deployment true "the definition of the deployment"
// @Success 200 {object} Deployment
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/deployments/{namespace} [put]
func updateObjectDeployment(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	deployment := new(appsv1.Deployment)
	if err := e.Bind(deployment); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != deployment.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.UpdateDeployment(contextName, namespace, deployment)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, saved)
}

// deleteObjectDeployment deletes a deployment
// @Summary Delete a deployment
// @Description Delete a deployment by name
// @ID delete-object-deployment
// @Tags ObjectsNamespaceLevel
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/deployments/{namespace}/{name} [delete]
func deleteObjectDeployment(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	err := provider.DeleteDeployment(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.NoContent(http.StatusOK)
}

// getObjectStatefulSets returns a JSON representation of all the statefulSet
// @Summary Get all statefulSets
// @Description Get all statefulSets
// @ID get-object-statefulSets
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Success 200 {array} StatefulSet
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/statefulSets/{namespace} [get]
func getObjectStatefulSets(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Get the state of the cluster
	statefulSets, err := provider.GetStatefulSets(contextName, namespace)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, statefulSets)
}

// getObjectStatefulSet returns a JSON representation of a statefulSet
// @Summary Get a statefulSet
// @Description Get a statefulSet by name
// @ID get-object-statefulSet
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Success 200 {object} StatefulSet
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/statefulSets/{namespace}/{name} [get]
func getObjectStatefulSet(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	statefulSet, err := provider.GetStatefulSet(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, statefulSet)
}

// createObjectStatefulSet creates a new statefulSet with the given object
// @Summary Create a statefulSet
// @Description Create a statefulSet.
// @ID create-object-statefulSet
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body StatefulSet true "the definition of the statefulSet"
// @Success 200 {object} StatefulSet
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/statefulSets/{namespace} [post]
func createObjectStatefulSet(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	statefulSet := new(appsv1.StatefulSet)
	if err := e.Bind(statefulSet); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != statefulSet.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.CreateStatefulSet(contextName, namespace, statefulSet)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusCreated, saved)
}

// updateObjectStatefulSet updates a statefulSet with the given object
// @Summary Update a statefulSet
// @Description Update a statefulSet.
// @ID update-object-statefulSet
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body StatefulSet true "the definition of the statefulSet"
// @Success 200 {object} StatefulSet
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/statefulSets/{namespace} [put]
func updateObjectStatefulSet(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	statefulSet := new(appsv1.StatefulSet)
	if err := e.Bind(statefulSet); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != statefulSet.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.UpdateStatefulSet(contextName, namespace, statefulSet)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, saved)
}

// deleteObjectStatefulSet deletes a statefulSet
// @Summary Delete a statefulSet
// @Description Delete a statefulSet by name
// @ID delete-object-statefulSet
// @Tags ObjectsNamespaceLevel
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/statefulSets/{namespace}/{name} [delete]
func deleteObjectStatefulSet(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	err := provider.DeleteStatefulSet(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.NoContent(http.StatusOK)
}

// getObjectDaemonSets returns a JSON representation of all the daemonSet
// @Summary Get all daemonSets
// @Description Get all daemonSets
// @ID get-object-daemonSets
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Success 200 {array} DaemonSet
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/daemonSets/{namespace} [get]
func getObjectDaemonSets(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Get the state of the cluster
	daemonSets, err := provider.GetDaemonSets(contextName, namespace)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, daemonSets)
}

// getObjectDaemonSet returns a JSON representation of a daemonSet
// @Summary Get a daemonSet
// @Description Get a daemonSet by name
// @ID get-object-daemonSet
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Success 200 {object} DaemonSet
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/daemonSets/{namespace}/{name} [get]
func getObjectDaemonSet(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	daemonSet, err := provider.GetDaemonSet(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, daemonSet)
}

// createObjectDaemonSet creates a new daemonSet with the given object
// @Summary Create a daemonSet
// @Description Create a daemonSet.
// @ID create-object-daemonSet
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body DaemonSet true "the definition of the daemonSet"
// @Success 200 {object} DaemonSet
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/daemonSets/{namespace} [post]
func createObjectDaemonSet(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	daemonSet := new(appsv1.DaemonSet)
	if err := e.Bind(daemonSet); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != daemonSet.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.CreateDaemonSet(contextName, namespace, daemonSet)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusCreated, saved)
}

// updateObjectDaemonSet updates a daemonSet with the given object
// @Summary Update a daemonSet
// @Description Update a daemonSet.
// @ID update-object-daemonSet
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body DaemonSet true "the definition of the daemonSet"
// @Success 200 {object} DaemonSet
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/daemonSets/{namespace} [put]
func updateObjectDaemonSet(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	daemonSet := new(appsv1.DaemonSet)
	if err := e.Bind(daemonSet); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != daemonSet.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.UpdateDaemonSet(contextName, namespace, daemonSet)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, saved)
}

// deleteObjectDaemonSet deletes a daemonSet
// @Summary Delete a daemonSet
// @Description Delete a daemonSet by name
// @ID delete-object-daemonSet
// @Tags ObjectsNamespaceLevel
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/daemonSets/{namespace}/{name} [delete]
func deleteObjectDaemonSet(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	err := provider.DeleteDaemonSet(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.NoContent(http.StatusOK)
}

// getObjectReplicaSets returns a JSON representation of all the replicaSet
// @Summary Get all replicaSets
// @Description Get all replicaSets
// @ID get-object-replicaSets
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Success 200 {array} ReplicaSet
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/replicaSets/{namespace} [get]
func getObjectReplicaSets(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Get the state of the cluster
	replicaSets, err := provider.GetReplicaSets(contextName, namespace)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, replicaSets)
}

// getObjectReplicaSet returns a JSON representation of a replicaSet
// @Summary Get a replicaSet
// @Description Get a replicaSet by name
// @ID get-object-replicaSet
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Success 200 {object} ReplicaSet
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/replicaSets/{namespace}/{name} [get]
func getObjectReplicaSet(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	replicaSet, err := provider.GetReplicaSet(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, replicaSet)
}

// createObjectReplicaSet creates a new replicaSet with the given object
// @Summary Create a replicaSet
// @Description Create a replicaSet.
// @ID create-object-replicaSet
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body ReplicaSet true "the definition of the replicaSet"
// @Success 200 {object} ReplicaSet
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/replicaSets/{namespace} [post]
func createObjectReplicaSet(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	replicaSet := new(appsv1.ReplicaSet)
	if err := e.Bind(replicaSet); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != replicaSet.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.CreateReplicaSet(contextName, namespace, replicaSet)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusCreated, saved)
}

// updateObjectReplicaSet updates a replicaSet with the given object
// @Summary Update a replicaSet
// @Description Update a replicaSet.
// @ID update-object-replicaSet
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body ReplicaSet true "the definition of the replicaSet"
// @Success 200 {object} ReplicaSet
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/replicaSets/{namespace} [put]
func updateObjectReplicaSet(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	replicaSet := new(appsv1.ReplicaSet)
	if err := e.Bind(replicaSet); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != replicaSet.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.UpdateReplicaSet(contextName, namespace, replicaSet)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, saved)
}

// deleteObjectReplicaSet deletes a replicaSet
// @Summary Delete a replicaSet
// @Description Delete a replicaSet by name
// @ID delete-object-replicaSet
// @Tags ObjectsNamespaceLevel
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/replicaSets/{namespace}/{name} [delete]
func deleteObjectReplicaSet(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	err := provider.DeleteReplicaSet(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.NoContent(http.StatusOK)
}

// getObjectNetworkPolicies returns a JSON representation of all the networkPolicy
// @Summary Get all networkPolicies
// @Description Get all networkPolicies
// @ID get-object-networkPolicies
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Success 200 {array} NetworkPolicy
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/networkPolicies/{namespace} [get]
func getObjectNetworkPolicies(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Get the state of the cluster
	networkPolicies, err := provider.GetNetworkPolicies(contextName, namespace)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, networkPolicies)
}

// getObjectNetworkPolicy returns a JSON representation of a networkPolicy
// @Summary Get a networkPolicy
// @Description Get a networkPolicy by name
// @ID get-object-networkPolicy
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Success 200 {object} NetworkPolicy
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/networkPolicies/{namespace}/{name} [get]
func getObjectNetworkPolicy(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	networkPolicy, err := provider.GetNetworkPolicy(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, networkPolicy)
}

// createObjectNetworkPolicy creates a new networkPolicy with the given object
// @Summary Create a networkPolicy
// @Description Create a networkPolicy.
// @ID create-object-networkPolicy
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body NetworkPolicy true "the definition of the networkPolicy"
// @Success 200 {object} NetworkPolicy
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/networkPolicies/{namespace} [post]
func createObjectNetworkPolicy(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	networkPolicy := new(networkingv1.NetworkPolicy)
	if err := e.Bind(networkPolicy); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != networkPolicy.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.CreateNetworkPolicy(contextName, namespace, networkPolicy)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusCreated, saved)
}

// updateObjectNetworkPolicy updates a networkPolicy with the given object
// @Summary Update a networkPolicy
// @Description Update a networkPolicy.
// @ID update-object-networkPolicy
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body NetworkPolicy true "the definition of the networkPolicy"
// @Success 200 {object} NetworkPolicy
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/networkPolicies/{namespace} [put]
func updateObjectNetworkPolicy(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	networkPolicy := new(networkingv1.NetworkPolicy)
	if err := e.Bind(networkPolicy); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != networkPolicy.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.UpdateNetworkPolicy(contextName, namespace, networkPolicy)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, saved)
}

// deleteObjectNetworkPolicy deletes a networkPolicy
// @Summary Delete a networkPolicy
// @Description Delete a networkPolicy by name
// @ID delete-object-networkPolicy
// @Tags ObjectsNamespaceLevel
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/networkPolicies/{namespace}/{name} [delete]
func deleteObjectNetworkPolicy(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	err := provider.DeleteNetworkPolicy(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.NoContent(http.StatusOK)
}

// getObjectRoles returns a JSON representation of all the role
// @Summary Get all roles
// @Description Get all roles
// @ID get-object-roles
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Success 200 {array} Role
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/roles/{namespace} [get]
func getObjectRoles(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Get the state of the cluster
	roles, err := provider.GetRoles(contextName, namespace)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, roles)
}

// getObjectRole returns a JSON representation of a role
// @Summary Get a role
// @Description Get a role by name
// @ID get-object-role
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Success 200 {object} Role
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/roles/{namespace}/{name} [get]
func getObjectRole(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	role, err := provider.GetRole(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, role)
}

// createObjectRole creates a new role with the given object
// @Summary Create a role
// @Description Create a role.
// @ID create-object-role
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body Role true "the definition of the role"
// @Success 200 {object} Role
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/roles/{namespace} [post]
func createObjectRole(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	role := new(rbacv1.Role)
	if err := e.Bind(role); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != role.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.CreateRole(contextName, namespace, role)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusCreated, saved)
}

// updateObjectRole updates a role with the given object
// @Summary Update a role
// @Description Update a role.
// @ID update-object-role
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body Role true "the definition of the role"
// @Success 200 {object} Role
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/roles/{namespace} [put]
func updateObjectRole(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	role := new(rbacv1.Role)
	if err := e.Bind(role); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != role.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.UpdateRole(contextName, namespace, role)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, saved)
}

// deleteObjectRole deletes a role
// @Summary Delete a role
// @Description Delete a role by name
// @ID delete-object-role
// @Tags ObjectsNamespaceLevel
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/roles/{namespace}/{name} [delete]
func deleteObjectRole(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	err := provider.DeleteRole(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.NoContent(http.StatusOK)
}

// getObjectRoleBindings returns a JSON representation of all the roleBinding
// @Summary Get all roleBindings
// @Description Get all roleBindings
// @ID get-object-roleBindings
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Success 200 {array} RoleBinding
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/roleBindings/{namespace} [get]
func getObjectRoleBindings(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Get the state of the cluster
	roleBindings, err := provider.GetRoleBindings(contextName, namespace)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, roleBindings)
}

// getObjectRoleBinding returns a JSON representation of a roleBinding
// @Summary Get a roleBinding
// @Description Get a roleBinding by name
// @ID get-object-roleBinding
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Success 200 {object} RoleBinding
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/roleBindings/{namespace}/{name} [get]
func getObjectRoleBinding(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	roleBinding, err := provider.GetRoleBinding(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, roleBinding)
}

// createObjectRoleBinding creates a new roleBinding with the given object
// @Summary Create a roleBinding
// @Description Create a roleBinding.
// @ID create-object-roleBinding
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body RoleBinding true "the definition of the roleBinding"
// @Success 200 {object} RoleBinding
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/roleBindings/{namespace} [post]
func createObjectRoleBinding(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	roleBinding := new(rbacv1.RoleBinding)
	if err := e.Bind(roleBinding); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != roleBinding.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.CreateRoleBinding(contextName, namespace, roleBinding)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusCreated, saved)
}

// updateObjectRoleBinding updates a roleBinding with the given object
// @Summary Update a roleBinding
// @Description Update a roleBinding.
// @ID update-object-roleBinding
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body RoleBinding true "the definition of the roleBinding"
// @Success 200 {object} RoleBinding
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/roleBindings/{namespace} [put]
func updateObjectRoleBinding(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	roleBinding := new(rbacv1.RoleBinding)
	if err := e.Bind(roleBinding); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != roleBinding.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.UpdateRoleBinding(contextName, namespace, roleBinding)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, saved)
}

// deleteObjectRoleBinding deletes a roleBinding
// @Summary Delete a roleBinding
// @Description Delete a roleBinding by name
// @ID delete-object-roleBinding
// @Tags ObjectsNamespaceLevel
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/roleBindings/{namespace}/{name} [delete]
func deleteObjectRoleBinding(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	err := provider.DeleteRoleBinding(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.NoContent(http.StatusOK)
}

// getObjectJobs returns a JSON representation of all the job
// @Summary Get all jobs
// @Description Get all jobs
// @ID get-object-jobs
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Success 200 {array} Job
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/jobs/{namespace} [get]
func getObjectJobs(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Get the state of the cluster
	jobs, err := provider.GetJobs(contextName, namespace)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, jobs)
}

// getObjectJob returns a JSON representation of a job
// @Summary Get a job
// @Description Get a job by name
// @ID get-object-job
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Success 200 {object} Job
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/jobs/{namespace}/{name} [get]
func getObjectJob(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	job, err := provider.GetJob(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, job)
}

// createObjectJob creates a new job with the given object
// @Summary Create a job
// @Description Create a job.
// @ID create-object-job
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body Job true "the definition of the job"
// @Success 200 {object} Job
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/jobs/{namespace} [post]
func createObjectJob(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	job := new(batchv1.Job)
	if err := e.Bind(job); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != job.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.CreateJob(contextName, namespace, job)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusCreated, saved)
}

// updateObjectJob updates a job with the given object
// @Summary Update a job
// @Description Update a job.
// @ID update-object-job
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body Job true "the definition of the job"
// @Success 200 {object} Job
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/jobs/{namespace} [put]
func updateObjectJob(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	job := new(batchv1.Job)
	if err := e.Bind(job); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != job.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.UpdateJob(contextName, namespace, job)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, saved)
}

// deleteObjectJob deletes a job
// @Summary Delete a job
// @Description Delete a job by name
// @ID delete-object-job
// @Tags ObjectsNamespaceLevel
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/jobs/{namespace}/{name} [delete]
func deleteObjectJob(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	err := provider.DeleteJob(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.NoContent(http.StatusOK)
}

// getObjectCronJobs returns a JSON representation of all the cronJob
// @Summary Get all cronJobs
// @Description Get all cronJobs
// @ID get-object-cronJobs
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Success 200 {array} CronJob
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/cronJobs/{namespace} [get]
func getObjectCronJobs(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Get the state of the cluster
	cronJobs, err := provider.GetCronJobs(contextName, namespace)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, cronJobs)
}

// getObjectCronJob returns a JSON representation of a cronJob
// @Summary Get a cronJob
// @Description Get a cronJob by name
// @ID get-object-cronJob
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Success 200 {object} CronJob
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/cronJobs/{namespace}/{name} [get]
func getObjectCronJob(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	cronJob, err := provider.GetCronJob(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, cronJob)
}

// createObjectCronJob creates a new cronJob with the given object
// @Summary Create a cronJob
// @Description Create a cronJob.
// @ID create-object-cronJob
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body CronJob true "the definition of the cronJob"
// @Success 200 {object} CronJob
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/cronJobs/{namespace} [post]
func createObjectCronJob(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	cronJob := new(batchv1beta1.CronJob)
	if err := e.Bind(cronJob); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != cronJob.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.CreateCronJob(contextName, namespace, cronJob)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusCreated, saved)
}

// updateObjectCronJob updates a cronJob with the given object
// @Summary Update a cronJob
// @Description Update a cronJob.
// @ID update-object-cronJob
// @Tags ObjectsNamespaceLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param body body CronJob true "the definition of the cronJob"
// @Success 200 {object} CronJob
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/cronJobs/{namespace} [put]
func updateObjectCronJob(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Parse the information from the body
	cronJob := new(batchv1beta1.CronJob)
	if err := e.Bind(cronJob); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	if namespace != cronJob.Namespace {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Errorf("the namespace names are different between the HTTP parameter ans the given object"))
	}

	// Create the object
	saved, err := provider.UpdateCronJob(contextName, namespace, cronJob)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, saved)
}

// deleteObjectCronJob deletes a cronJob
// @Summary Delete a cronJob
// @Description Delete a cronJob by name
// @ID delete-object-cronJob
// @Tags ObjectsNamespaceLevel
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/cronJobs/{namespace}/{name} [delete]
func deleteObjectCronJob(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	err := provider.DeleteCronJob(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.NoContent(http.StatusOK)
}
