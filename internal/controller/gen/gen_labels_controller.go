// The following directive is necessary to make the package coherent:

// +build ignore

// This program generates labels_controller.go. It can be invoked by running
// go generate

package main

import (
	"log"
	"os"
	"text/template"
	"time"

	"github.com/twuillemin/kuboxy/pkg/types"
)

func main() {

	type ObjectType struct {
		ClusterEntities   []types.ObjectDefinition
		NamespaceEntities []types.ObjectDefinition
	}

	objectTypes := ObjectType{
		ClusterEntities:   types.ClusterObjectDefinitions,
		NamespaceEntities: types.NamespaceObjectDefinitions,
	}

	f, err := os.Create("labels_controller.go")
	die(err)
	defer f.Close()

	builderTemplate.Execute(
		f,
		struct {
			Timestamp   time.Time
			ObjectTypes ObjectType
		}{
			Timestamp:   time.Now(),
			ObjectTypes: objectTypes,
		})
}

func die(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

var builderTemplate = template.Must(template.New("").Parse(`// Package controller regroups all the HTTP controllers of the application 
//
// Code generated by go generate; DO NOT EDIT.
//
// This file was generated by gen_labels_controller.go at {{ .Timestamp }}
package controller

import (
	"net/http"

	"github.com/twuillemin/kuboxy/pkg/provider"
	"github.com/labstack/echo"
)

func registerLabelsController(e *echo.Echo) {

	// Declare the routes
	e.GET("api/v1/labels/:contextName/:namespace", getLabels)
}

// getLabels generates a JSON representation of all the labels and their values in the given configuration
// @Summary Get all the labels and their values
// @Description Get all the labels and their values
// @ID get-labels
// @Tags Labels
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Success 200 {object} MapOfStrings
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/labels/{contextName}/{namespace} [get]
func getLabels(e echo.Context) error {

	queryContextName := e.Param("contextName")
	queryNamespace := e.Param("namespace")

	labels := make(map[string]map[string]bool)

{{ range .ObjectTypes.ClusterEntities }}
	// Get the state of the cluster
	{{ .PluralVariable }}, err := provider.Get{{ .Plural }}(queryContextName)
	if err != nil {
		return echo.NewHTTPError(http.StatusInternalServerError, err)
	}

	for _, {{ .Variable }} := range {{ .PluralVariable }} {
		for k, v := range {{ .Variable }}.ObjectMeta.Labels {
			values, ok := labels[k]
			if !ok {
				values = make(map[string]bool)
			}
			values[v] = true
			labels[k] = values
		}
	}
{{ end }}

{{ range .ObjectTypes.NamespaceEntities }}
	// Get the state of the cluster
	{{ .PluralVariable }}, err := provider.Get{{ .Plural }}(queryContextName, queryNamespace)
	if err != nil {
		return echo.NewHTTPError(http.StatusInternalServerError, err)
	}

	for _, {{ .Variable }} := range {{ .PluralVariable }} {
		for k, v := range {{ .Variable }}.ObjectMeta.Labels {
			values, ok := labels[k]
			if !ok {
				values = make(map[string]bool)
			}
			values[v] = true
			labels[k] = values
		}
	}
{{ end }}

	results := make(map[string][]string)
	for tagName, tagValues := range labels {

		values := make([]string,0,len(tagValues))
		for tagValue := range tagValues {
			values = append(values, tagValue)
		}

		results[tagName] = values
	}

	return e.JSON(http.StatusOK, results)
}`))
