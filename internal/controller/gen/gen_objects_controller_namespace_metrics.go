// The following directive is necessary to make the package coherent:

// +build ignore

// This program generates objects_controller_namespace_metrics.go. It can be invoked by running
// go generate

package main

import (
	"log"
	"os"
	"text/template"
	"time"

	"github.com/twuillemin/kuboxy/pkg/types"
)

func main() {

	f, err := os.Create("objects_controller_namespace_metrics.go")
	die(err)
	defer f.Close()

	builderTemplate.Execute(
		f,
		struct {
			Timestamp         time.Time
			ObjectDefinitions []types.ObjectDefinition
		}{
			Timestamp:         time.Now(),
			ObjectDefinitions: types.NamespaceMetricsObjectDefinitions,
		})
}

func die(err error) {
	if err != nil {
		log.Fatal(err)
	}
}

var builderTemplate = template.Must(template.New("").Parse(`// Package controller regroups all the HTTP controllers of the application 
//
// Code generated by go generate; DO NOT EDIT.
//
// This file was generated by gen_objects_controller_namespace_metrics.go at {{ .Timestamp }}
package controller

import (
	"net/http"

	"github.com/twuillemin/kuboxy/pkg/provider"
	"github.com/labstack/echo"
)

func registerObjectNamespaceMetricsControllers(e *echo.Echo) {
{{ range .ObjectDefinitions }}
	// {{ .Plural }}
	e.GET("api/v1/objects/:contextName/{{ .PluralVariable }}/:namespace", getObject{{ .Plural }})
	e.GET("api/v1/objects/:contextName/{{ .PluralVariable }}/:namespace/:name", getObject{{ .Name }})
{{ end }}
}

{{ range .ObjectDefinitions }}
// getObject{{ .Plural }} returns a JSON representation of all the {{ .Variable }}
// @Summary Get all {{ .PluralVariable }}
// @Description Get all {{ .PluralVariable }}
// @ID get-object-{{ .PluralVariable }}
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Success 200 {array} {{ .Name }}
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/{{ .PluralVariable }}/{namespace} [get]
func getObject{{ .Plural }}(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")

	// Get the state of the cluster
	{{ .PluralVariable }}, err := provider.Get{{ .Plural }}(contextName, namespace)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, {{ .PluralVariable }})
}

// getObject{{ .Name }} returns a JSON representation of a {{ .Variable }}
// @Summary Get a {{ .Variable }}
// @Description Get a {{ .Variable }} by name
// @ID get-object-{{ .Variable }}
// @Tags ObjectsNamespaceLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param namespace path string true "the name of the namespace"
// @Param name path string true "the name of the object"
// @Success 200 {object} {{ .Name }}
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/{{ .PluralVariable }}/{namespace}/{name} [get]
func getObject{{ .Name }}(e echo.Context) error {

	contextName := e.Param("contextName")
	namespace := e.Param("namespace")
	name := e.Param("name")

	// Get the state of the cluster
	{{ .Variable }}, err := provider.Get{{ .Name }}(contextName, namespace, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, {{ .Variable }})
}
{{ end }}`))
