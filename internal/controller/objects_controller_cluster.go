// Package controller regroups all the HTTP controllers of the application
//
// Code generated by go generate; DO NOT EDIT.
//
// This file was generated by gen_objects_controller_cluster.go at 2019-06-12 20:54:34.228140224 +0300 EEST m=+0.005146153
package controller

import (
	"net/http"

	"github.com/labstack/echo"
	"github.com/twuillemin/kuboxy/pkg/provider"

	corev1 "k8s.io/api/core/v1"
	rbacv1 "k8s.io/api/rbac/v1"
	storagev1 "k8s.io/api/storage/v1"
)

func registerObjectClusterControllers(e *echo.Echo) {

	// Namespaces
	e.GET("api/v1/objects/:contextName/namespaces", getObjectNamespaces)
	e.GET("api/v1/objects/:contextName/namespaces/:name", getObjectNamespace)
	e.POST("api/v1/objects/:contextName/namespaces", createObjectNamespace)
	e.PUT("api/v1/objects/:contextName/namespaces", updateObjectNamespace)
	e.DELETE("api/v1/objects/:contextName/namespaces/:name", deleteObjectNamespace)

	// Nodes
	e.GET("api/v1/objects/:contextName/nodes", getObjectNodes)
	e.GET("api/v1/objects/:contextName/nodes/:name", getObjectNode)
	e.POST("api/v1/objects/:contextName/nodes", createObjectNode)
	e.PUT("api/v1/objects/:contextName/nodes", updateObjectNode)
	e.DELETE("api/v1/objects/:contextName/nodes/:name", deleteObjectNode)

	// PersistentVolumes
	e.GET("api/v1/objects/:contextName/persistentVolumes", getObjectPersistentVolumes)
	e.GET("api/v1/objects/:contextName/persistentVolumes/:name", getObjectPersistentVolume)
	e.POST("api/v1/objects/:contextName/persistentVolumes", createObjectPersistentVolume)
	e.PUT("api/v1/objects/:contextName/persistentVolumes", updateObjectPersistentVolume)
	e.DELETE("api/v1/objects/:contextName/persistentVolumes/:name", deleteObjectPersistentVolume)

	// ClusterRoles
	e.GET("api/v1/objects/:contextName/clusterRoles", getObjectClusterRoles)
	e.GET("api/v1/objects/:contextName/clusterRoles/:name", getObjectClusterRole)
	e.POST("api/v1/objects/:contextName/clusterRoles", createObjectClusterRole)
	e.PUT("api/v1/objects/:contextName/clusterRoles", updateObjectClusterRole)
	e.DELETE("api/v1/objects/:contextName/clusterRoles/:name", deleteObjectClusterRole)

	// ClusterRoleBindings
	e.GET("api/v1/objects/:contextName/clusterRoleBindings", getObjectClusterRoleBindings)
	e.GET("api/v1/objects/:contextName/clusterRoleBindings/:name", getObjectClusterRoleBinding)
	e.POST("api/v1/objects/:contextName/clusterRoleBindings", createObjectClusterRoleBinding)
	e.PUT("api/v1/objects/:contextName/clusterRoleBindings", updateObjectClusterRoleBinding)
	e.DELETE("api/v1/objects/:contextName/clusterRoleBindings/:name", deleteObjectClusterRoleBinding)

	// StorageClasses
	e.GET("api/v1/objects/:contextName/storageClasses", getObjectStorageClasses)
	e.GET("api/v1/objects/:contextName/storageClasses/:name", getObjectStorageClass)
	e.POST("api/v1/objects/:contextName/storageClasses", createObjectStorageClass)
	e.PUT("api/v1/objects/:contextName/storageClasses", updateObjectStorageClass)
	e.DELETE("api/v1/objects/:contextName/storageClasses/:name", deleteObjectStorageClass)

}

// getObjectNamespaces returns a JSON representation of all the namespace
// @Summary Get all namespaces
// @Description Get all namespaces
// @ID get-object-namespaces
// @Tags ObjectsClusterLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Success 200 {array} Namespace
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/namespaces [get]
func getObjectNamespaces(e echo.Context) error {

	contextName := e.Param("contextName")

	// Get the state of the cluster
	namespaces, err := provider.GetNamespaces(contextName)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, namespaces)
}

// getObjectNamespace returns a JSON representation of a namespace
// @Summary Get a namespace
// @Description Get a namespace by name
// @ID get-object-namespace
// @Tags ObjectsClusterLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param name path string true "the name of the object"
// @Success 200 {object} Namespace
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/namespaces/{name} [get]
func getObjectNamespace(e echo.Context) error {

	contextName := e.Param("contextName")
	name := e.Param("name")

	// Get the state of the cluster
	namespace, err := provider.GetNamespace(contextName, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, namespace)
}

// createObjectNamespace creates a new namespace with the given object
// @Summary Create a namespace
// @Description Create a namespace.
// @ID create-object-namespace
// @Tags ObjectsClusterLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param body body Namespace true "the definition of the namespace"
// @Success 200 {object} Namespace
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/namespaces [post]
func createObjectNamespace(e echo.Context) error {

	contextName := e.Param("contextName")

	// Parse the information from the body
	namespace := new(corev1.Namespace)
	if err := e.Bind(namespace); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	// Create the object
	saved, err := provider.CreateNamespace(contextName, namespace)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusCreated, saved)
}

// updateObjectNamespace updates a namespace with the given object
// @Summary Update a namespace
// @Description Update a namespace.
// @ID update-object-namespace
// @Tags ObjectsClusterLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param body body Namespace true "the definition of the namespace"
// @Success 200 {object} Namespace
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/namespaces [put]
func updateObjectNamespace(e echo.Context) error {

	contextName := e.Param("contextName")

	// Parse the information from the body
	namespace := new(corev1.Namespace)
	if err := e.Bind(namespace); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	// Create the object
	saved, err := provider.UpdateNamespace(contextName, namespace)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, saved)
}

// deleteObjectNamespace deletes a namespace
// @Summary Delete a namespace
// @Description Delete a namespace by name
// @ID delete-object-namespace
// @Tags ObjectsClusterLevel
// @Param contextName path string true "the name of the context"
// @Param name path string true "the name of the object"
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/namespaces/{name} [delete]
func deleteObjectNamespace(e echo.Context) error {

	contextName := e.Param("contextName")
	name := e.Param("name")

	// Get the state of the cluster
	err := provider.DeleteNamespace(contextName, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.NoContent(http.StatusOK)
}

// getObjectNodes returns a JSON representation of all the node
// @Summary Get all nodes
// @Description Get all nodes
// @ID get-object-nodes
// @Tags ObjectsClusterLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Success 200 {array} Node
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/nodes [get]
func getObjectNodes(e echo.Context) error {

	contextName := e.Param("contextName")

	// Get the state of the cluster
	nodes, err := provider.GetNodes(contextName)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, nodes)
}

// getObjectNode returns a JSON representation of a node
// @Summary Get a node
// @Description Get a node by name
// @ID get-object-node
// @Tags ObjectsClusterLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param name path string true "the name of the object"
// @Success 200 {object} Node
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/nodes/{name} [get]
func getObjectNode(e echo.Context) error {

	contextName := e.Param("contextName")
	name := e.Param("name")

	// Get the state of the cluster
	node, err := provider.GetNode(contextName, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, node)
}

// createObjectNode creates a new node with the given object
// @Summary Create a node
// @Description Create a node.
// @ID create-object-node
// @Tags ObjectsClusterLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param body body Node true "the definition of the node"
// @Success 200 {object} Node
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/nodes [post]
func createObjectNode(e echo.Context) error {

	contextName := e.Param("contextName")

	// Parse the information from the body
	node := new(corev1.Node)
	if err := e.Bind(node); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	// Create the object
	saved, err := provider.CreateNode(contextName, node)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusCreated, saved)
}

// updateObjectNode updates a node with the given object
// @Summary Update a node
// @Description Update a node.
// @ID update-object-node
// @Tags ObjectsClusterLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param body body Node true "the definition of the node"
// @Success 200 {object} Node
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/nodes [put]
func updateObjectNode(e echo.Context) error {

	contextName := e.Param("contextName")

	// Parse the information from the body
	node := new(corev1.Node)
	if err := e.Bind(node); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	// Create the object
	saved, err := provider.UpdateNode(contextName, node)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, saved)
}

// deleteObjectNode deletes a node
// @Summary Delete a node
// @Description Delete a node by name
// @ID delete-object-node
// @Tags ObjectsClusterLevel
// @Param contextName path string true "the name of the context"
// @Param name path string true "the name of the object"
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/nodes/{name} [delete]
func deleteObjectNode(e echo.Context) error {

	contextName := e.Param("contextName")
	name := e.Param("name")

	// Get the state of the cluster
	err := provider.DeleteNode(contextName, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.NoContent(http.StatusOK)
}

// getObjectPersistentVolumes returns a JSON representation of all the persistentVolume
// @Summary Get all persistentVolumes
// @Description Get all persistentVolumes
// @ID get-object-persistentVolumes
// @Tags ObjectsClusterLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Success 200 {array} PersistentVolume
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/persistentVolumes [get]
func getObjectPersistentVolumes(e echo.Context) error {

	contextName := e.Param("contextName")

	// Get the state of the cluster
	persistentVolumes, err := provider.GetPersistentVolumes(contextName)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, persistentVolumes)
}

// getObjectPersistentVolume returns a JSON representation of a persistentVolume
// @Summary Get a persistentVolume
// @Description Get a persistentVolume by name
// @ID get-object-persistentVolume
// @Tags ObjectsClusterLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param name path string true "the name of the object"
// @Success 200 {object} PersistentVolume
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/persistentVolumes/{name} [get]
func getObjectPersistentVolume(e echo.Context) error {

	contextName := e.Param("contextName")
	name := e.Param("name")

	// Get the state of the cluster
	persistentVolume, err := provider.GetPersistentVolume(contextName, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, persistentVolume)
}

// createObjectPersistentVolume creates a new persistentVolume with the given object
// @Summary Create a persistentVolume
// @Description Create a persistentVolume.
// @ID create-object-persistentVolume
// @Tags ObjectsClusterLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param body body PersistentVolume true "the definition of the persistentVolume"
// @Success 200 {object} PersistentVolume
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/persistentVolumes [post]
func createObjectPersistentVolume(e echo.Context) error {

	contextName := e.Param("contextName")

	// Parse the information from the body
	persistentVolume := new(corev1.PersistentVolume)
	if err := e.Bind(persistentVolume); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	// Create the object
	saved, err := provider.CreatePersistentVolume(contextName, persistentVolume)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusCreated, saved)
}

// updateObjectPersistentVolume updates a persistentVolume with the given object
// @Summary Update a persistentVolume
// @Description Update a persistentVolume.
// @ID update-object-persistentVolume
// @Tags ObjectsClusterLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param body body PersistentVolume true "the definition of the persistentVolume"
// @Success 200 {object} PersistentVolume
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/persistentVolumes [put]
func updateObjectPersistentVolume(e echo.Context) error {

	contextName := e.Param("contextName")

	// Parse the information from the body
	persistentVolume := new(corev1.PersistentVolume)
	if err := e.Bind(persistentVolume); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	// Create the object
	saved, err := provider.UpdatePersistentVolume(contextName, persistentVolume)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, saved)
}

// deleteObjectPersistentVolume deletes a persistentVolume
// @Summary Delete a persistentVolume
// @Description Delete a persistentVolume by name
// @ID delete-object-persistentVolume
// @Tags ObjectsClusterLevel
// @Param contextName path string true "the name of the context"
// @Param name path string true "the name of the object"
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/persistentVolumes/{name} [delete]
func deleteObjectPersistentVolume(e echo.Context) error {

	contextName := e.Param("contextName")
	name := e.Param("name")

	// Get the state of the cluster
	err := provider.DeletePersistentVolume(contextName, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.NoContent(http.StatusOK)
}

// getObjectClusterRoles returns a JSON representation of all the clusterRole
// @Summary Get all clusterRoles
// @Description Get all clusterRoles
// @ID get-object-clusterRoles
// @Tags ObjectsClusterLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Success 200 {array} ClusterRole
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/clusterRoles [get]
func getObjectClusterRoles(e echo.Context) error {

	contextName := e.Param("contextName")

	// Get the state of the cluster
	clusterRoles, err := provider.GetClusterRoles(contextName)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, clusterRoles)
}

// getObjectClusterRole returns a JSON representation of a clusterRole
// @Summary Get a clusterRole
// @Description Get a clusterRole by name
// @ID get-object-clusterRole
// @Tags ObjectsClusterLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param name path string true "the name of the object"
// @Success 200 {object} ClusterRole
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/clusterRoles/{name} [get]
func getObjectClusterRole(e echo.Context) error {

	contextName := e.Param("contextName")
	name := e.Param("name")

	// Get the state of the cluster
	clusterRole, err := provider.GetClusterRole(contextName, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, clusterRole)
}

// createObjectClusterRole creates a new clusterRole with the given object
// @Summary Create a clusterRole
// @Description Create a clusterRole.
// @ID create-object-clusterRole
// @Tags ObjectsClusterLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param body body ClusterRole true "the definition of the clusterRole"
// @Success 200 {object} ClusterRole
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/clusterRoles [post]
func createObjectClusterRole(e echo.Context) error {

	contextName := e.Param("contextName")

	// Parse the information from the body
	clusterRole := new(rbacv1.ClusterRole)
	if err := e.Bind(clusterRole); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	// Create the object
	saved, err := provider.CreateClusterRole(contextName, clusterRole)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusCreated, saved)
}

// updateObjectClusterRole updates a clusterRole with the given object
// @Summary Update a clusterRole
// @Description Update a clusterRole.
// @ID update-object-clusterRole
// @Tags ObjectsClusterLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param body body ClusterRole true "the definition of the clusterRole"
// @Success 200 {object} ClusterRole
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/clusterRoles [put]
func updateObjectClusterRole(e echo.Context) error {

	contextName := e.Param("contextName")

	// Parse the information from the body
	clusterRole := new(rbacv1.ClusterRole)
	if err := e.Bind(clusterRole); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	// Create the object
	saved, err := provider.UpdateClusterRole(contextName, clusterRole)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, saved)
}

// deleteObjectClusterRole deletes a clusterRole
// @Summary Delete a clusterRole
// @Description Delete a clusterRole by name
// @ID delete-object-clusterRole
// @Tags ObjectsClusterLevel
// @Param contextName path string true "the name of the context"
// @Param name path string true "the name of the object"
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/clusterRoles/{name} [delete]
func deleteObjectClusterRole(e echo.Context) error {

	contextName := e.Param("contextName")
	name := e.Param("name")

	// Get the state of the cluster
	err := provider.DeleteClusterRole(contextName, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.NoContent(http.StatusOK)
}

// getObjectClusterRoleBindings returns a JSON representation of all the clusterRoleBinding
// @Summary Get all clusterRoleBindings
// @Description Get all clusterRoleBindings
// @ID get-object-clusterRoleBindings
// @Tags ObjectsClusterLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Success 200 {array} ClusterRoleBinding
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/clusterRoleBindings [get]
func getObjectClusterRoleBindings(e echo.Context) error {

	contextName := e.Param("contextName")

	// Get the state of the cluster
	clusterRoleBindings, err := provider.GetClusterRoleBindings(contextName)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, clusterRoleBindings)
}

// getObjectClusterRoleBinding returns a JSON representation of a clusterRoleBinding
// @Summary Get a clusterRoleBinding
// @Description Get a clusterRoleBinding by name
// @ID get-object-clusterRoleBinding
// @Tags ObjectsClusterLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param name path string true "the name of the object"
// @Success 200 {object} ClusterRoleBinding
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/clusterRoleBindings/{name} [get]
func getObjectClusterRoleBinding(e echo.Context) error {

	contextName := e.Param("contextName")
	name := e.Param("name")

	// Get the state of the cluster
	clusterRoleBinding, err := provider.GetClusterRoleBinding(contextName, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, clusterRoleBinding)
}

// createObjectClusterRoleBinding creates a new clusterRoleBinding with the given object
// @Summary Create a clusterRoleBinding
// @Description Create a clusterRoleBinding.
// @ID create-object-clusterRoleBinding
// @Tags ObjectsClusterLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param body body ClusterRoleBinding true "the definition of the clusterRoleBinding"
// @Success 200 {object} ClusterRoleBinding
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/clusterRoleBindings [post]
func createObjectClusterRoleBinding(e echo.Context) error {

	contextName := e.Param("contextName")

	// Parse the information from the body
	clusterRoleBinding := new(rbacv1.ClusterRoleBinding)
	if err := e.Bind(clusterRoleBinding); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	// Create the object
	saved, err := provider.CreateClusterRoleBinding(contextName, clusterRoleBinding)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusCreated, saved)
}

// updateObjectClusterRoleBinding updates a clusterRoleBinding with the given object
// @Summary Update a clusterRoleBinding
// @Description Update a clusterRoleBinding.
// @ID update-object-clusterRoleBinding
// @Tags ObjectsClusterLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param body body ClusterRoleBinding true "the definition of the clusterRoleBinding"
// @Success 200 {object} ClusterRoleBinding
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/clusterRoleBindings [put]
func updateObjectClusterRoleBinding(e echo.Context) error {

	contextName := e.Param("contextName")

	// Parse the information from the body
	clusterRoleBinding := new(rbacv1.ClusterRoleBinding)
	if err := e.Bind(clusterRoleBinding); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	// Create the object
	saved, err := provider.UpdateClusterRoleBinding(contextName, clusterRoleBinding)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, saved)
}

// deleteObjectClusterRoleBinding deletes a clusterRoleBinding
// @Summary Delete a clusterRoleBinding
// @Description Delete a clusterRoleBinding by name
// @ID delete-object-clusterRoleBinding
// @Tags ObjectsClusterLevel
// @Param contextName path string true "the name of the context"
// @Param name path string true "the name of the object"
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/clusterRoleBindings/{name} [delete]
func deleteObjectClusterRoleBinding(e echo.Context) error {

	contextName := e.Param("contextName")
	name := e.Param("name")

	// Get the state of the cluster
	err := provider.DeleteClusterRoleBinding(contextName, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.NoContent(http.StatusOK)
}

// getObjectStorageClasses returns a JSON representation of all the storageClass
// @Summary Get all storageClasses
// @Description Get all storageClasses
// @ID get-object-storageClasses
// @Tags ObjectsClusterLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Success 200 {array} StorageClass
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/storageClasses [get]
func getObjectStorageClasses(e echo.Context) error {

	contextName := e.Param("contextName")

	// Get the state of the cluster
	storageClasses, err := provider.GetStorageClasses(contextName)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, storageClasses)
}

// getObjectStorageClass returns a JSON representation of a storageClass
// @Summary Get a storageClass
// @Description Get a storageClass by name
// @ID get-object-storageClass
// @Tags ObjectsClusterLevel
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param name path string true "the name of the object"
// @Success 200 {object} StorageClass
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/storageClasses/{name} [get]
func getObjectStorageClass(e echo.Context) error {

	contextName := e.Param("contextName")
	name := e.Param("name")

	// Get the state of the cluster
	storageClass, err := provider.GetStorageClass(contextName, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, storageClass)
}

// createObjectStorageClass creates a new storageClass with the given object
// @Summary Create a storageClass
// @Description Create a storageClass.
// @ID create-object-storageClass
// @Tags ObjectsClusterLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param body body StorageClass true "the definition of the storageClass"
// @Success 200 {object} StorageClass
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/storageClasses [post]
func createObjectStorageClass(e echo.Context) error {

	contextName := e.Param("contextName")

	// Parse the information from the body
	storageClass := new(storagev1.StorageClass)
	if err := e.Bind(storageClass); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	// Create the object
	saved, err := provider.CreateStorageClass(contextName, storageClass)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusCreated, saved)
}

// updateObjectStorageClass updates a storageClass with the given object
// @Summary Update a storageClass
// @Description Update a storageClass.
// @ID update-object-storageClass
// @Tags ObjectsClusterLevel
// @Accept application/json
// @Produce application/json
// @Param contextName path string true "the name of the context"
// @Param body body StorageClass true "the definition of the storageClass"
// @Success 200 {object} StorageClass
// @Failure 400 {object} echo.HTTPError
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/storageClasses [put]
func updateObjectStorageClass(e echo.Context) error {

	contextName := e.Param("contextName")

	// Parse the information from the body
	storageClass := new(storagev1.StorageClass)
	if err := e.Bind(storageClass); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err)
	}

	// Create the object
	saved, err := provider.UpdateStorageClass(contextName, storageClass)
	if err != nil {
		return getHTTPError(err)
	}

	return e.JSON(http.StatusOK, saved)
}

// deleteObjectStorageClass deletes a storageClass
// @Summary Delete a storageClass
// @Description Delete a storageClass by name
// @ID delete-object-storageClass
// @Tags ObjectsClusterLevel
// @Param contextName path string true "the name of the context"
// @Param name path string true "the name of the object"
// @Failure 404 {object} echo.HTTPError
// @Failure 500 {object} echo.HTTPError
// @Router /api/v1/objects/{contextName}/storageClasses/{name} [delete]
func deleteObjectStorageClass(e echo.Context) error {

	contextName := e.Param("contextName")
	name := e.Param("name")

	// Get the state of the cluster
	err := provider.DeleteStorageClass(contextName, name)
	if err != nil {
		return getHTTPError(err)
	}

	return e.NoContent(http.StatusOK)
}
